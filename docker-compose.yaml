version: "3"

networks:
  malhuza-network:
    driver: bridge

services:
  backend:
    build:
      context: ./apps/api/core
      dockerfile: Dockerfile
    command: /app/start.sh
    volumes:
      - ./apps/api/core:/app
    ports:
      - 8000:8000
      # - "8001:8000"   # Port mapping for the second replica
      # - "8002:8000"   # Port mapping for the third replica
    networks:
      - malhuza-network
    depends_on:
      - postgresql
      - rabbitmq
      - redis
    # deploy:
    #   replicas: 3  # Set the desired number of replicas
  content:
    build:
      context: ./apps/api/content
      dockerfile: Dockerfile
    restart: always
    volumes:
      - ./apps/api/content:/app
    ports:
      - '4000:4000'
    environment:
      PORT: 4000
      NODE_ENV: production
    networks:
      - malhuza-network
    depends_on:
      - mongodb

  postgresql:
    image: postgres:latest
    container_name: db_malhuza
    environment:
      - POSTGRES_USER=sahal
      - POSTGRES_PASSWORD=09876
      - POSTGRES_DB=malhuza
    ports:
      - "5432:5432"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - malhuza-network
  
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq_malhuza
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - malhuza-network

  mongodb:
    image: mongo
    restart: always
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - ./apps/api/content/config/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      - mongo_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: sahal
      MONGO_INITDB_ROOT_PASSWORD: 09876
      MONGO_INITDB_DATABASE: content
    networks:
      - malhuza-network

  redis:
    image: redis
    ports:
      - "6379:6379"
    volumes:
    - redis_data:/data
    networks:
      - malhuza-network

  worker:
    build: 
      context: ./apps/api/core
      dockerfile: Dockerfile
    command: /app/worker.sh
    volumes:
      - ./apps/api/core:/app
    depends_on:
      - postgresql
      - backend
    networks:
      - malhuza-network
      
volumes:
  redis_data:
  postgresql_data:
  mongo_data:
